package news_sina

import (
	"encoding/json"
	"github.com/gohp/goutils/color"
	"github.com/gohp/goutils/gotime"
	"github.com/gohp/goutils/hash"
	"github.com/gohp/goutils/rand"
	"io/ioutil"
	"net/http"
	"spiderhub/models"
	"strconv"
	"time"
)

type AutoGenerated struct {
	Novels []interface{} `json:"novels"`
	Data   []struct {
		Docid       string      `json:"docid"`
		Author      string      `json:"author"`
		Tags        []string    `json:"tags"`
		Title       string      `json:"title"`
		Ltitle      string      `json:"ltitle"`
		Stitle      interface{} `json:"stitle"`
		URL         string      `json:"url"`
		Pcurl       string      `json:"pcurl"`
		Wapurl      string      `json:"wapurl"`
		Ctime       int         `json:"ctime"`
		FpTime      int         `json:"fpTime"`
		Summary     string      `json:"summary"`
		OrgURL      string      `json:"orgUrl"`
		Intro       string      `json:"intro"`
		Media       string      `json:"media"`
		AuthorID    string      `json:"authorId"`
		Type        int         `json:"type"`
		Thumb       string      `json:"thumb"`
		Thumbs      []string    `json:"thumbs"`
		Mthumbs     []string    `json:"mthumbs,omitempty"`
		ImgCount    int         `json:"img_count"`
		AllModelIDs []string    `json:"allModelIDs"`
		Surl        string      `json:"surl"`
		LabelsShow  []string    `json:"labels_show"`
		Labels      struct {
			NAMING_FAILED float64 `json:"探墓"`
		} `json:"labels,omitempty"`
		Mtitle           interface{} `json:"mtitle"`
		FDocid           string      `json:"f_docid"`
		EditLevel        int         `json:"editLevel"`
		Level            int         `json:"level"`
		UUID             string      `json:"uuid"`
		Info             string      `json:"info"`
		NewCommentid     string      `json:"new_commentid"`
		Commentid        string      `json:"commentid"`
		CommentCountShow int         `json:"comment_count_show"`
		CommentCount     int         `json:"comment_count"`
		Reason           int         `json:"reason"`
		UserIcon         string      `json:"user_icon"`
		UID              int         `json:"uid"`
	} `json:"data"`
	Cards  []interface{} `json:"cards"`
	Status struct {
		Msg   string `json:"msg"`
		Code  int    `json:"code"`
		Total int    `json:"total"`
		End   int    `json:"end"`
	} `json:"status"`
	Photo   []interface{} `json:"photo"`
	Sax     []interface{} `json:"sax"`
	ReqTime int           `json:"req_time"`
}

type model struct {
	Status  int    `json:"status"`
	Message string `json:"message"`
	Count   int    `json:"count"`
	Data    []struct {
		NewsDate string `json:"news_date"`
		Date     string `json:"date"`
		Title    string `json:"title"`
		WapTitle string `json:"wap_title"`
		Img      string `json:"img"`
		Type     string `json:"type"`
		Pics     struct {
			Total int `json:"total"`
		} `json:"pics"`
		Link       string `json:"link"`
		CommentID  string `json:"comment_id"`
		Commentid  string `json:"commentid"`
		Source     string `json:"source"`
		Intro      string `json:"intro"`
		MediaTypes string `json:"mediaTypes"`
		IsSubject  int    `json:"isSubject"`
		IsDujia    int    `json:"isDujia"`
		NewsType   string `json:"newsType"`
		DocID      string `json:"docID"`
		Dataid     string `json:"dataid"`
		NewsTag    string `json:"newsTag"`
		Comment    string `json:"comment"`
	} `json:"data"`
}

var running = true

func extract(target, category string) {
	resp, err := http.Get(target)
	if err != nil {
		_, _ = models.NewLog(err.Error()).Save()
	}
	if resp == nil {
		return
	}
	defer resp.Body.Close()
	result, err := ioutil.ReadAll(resp.Body)
	m := &model{}
	_ = json.Unmarshal(result, &m)
	// 获取数据失败
	if m.Message != "success" {
		return
	}
	if len(m.Data) == 0 {
		running = false
	}
	for _, i := range m.Data {
		p := models.NewPage()
		p.Title = i.Title
		p.Source = "新浪"
		p.Image = i.Img
		p.Url = i.Link
		p.Category = category
		p.Date, _ = strconv.Atoi(time.Now().Format("20060102"))
		p.ExtractTime = gotime.FormatDatetime(time.Now(), gotime.TT)
		p.PublishTime = i.NewsDate
		p.Hash = hash.Sha256String(p.Url)
		p.Id = time.Now().UnixNano() + int64(rand.RandInt(100, 999))
		res, _ := p.Save()
		if res != nil {
			color.Green.Println(p.Source + "-" + p.Title)
		} else {
			color.Red.Println(p.Source + "-" + p.Title)
		}
	}
}

// 娱乐频道：
//https://interface.sina.cn/ent/feed.d.json?ch=ent&col=ent&act=more&t=1484477669001&show_num=10&page=4
//参数说明：
//ch:频道
//娱乐：ent
//体育：sports
//科技：tech
//教育：edu
//健康：health
//时尚：fashion
//博客：blog
//col：分类
//show_num
//page
func Run() {
	categoryMap := make(map[string]string)
	//microsecond := fmt.Sprintf("%d", time.Now().UnixNano()/1000)
	categoryMap["tech"] = "科技"
	categoryMap["ent"] = "娱乐"
	categoryMap["sports"] = "体育"
	categoryMap["edu"] = "教育"
	categoryMap["health"] = "健康"
	categoryMap["fashion"] = "时尚"
	categoryMap["blog"] = "博客"

label:
	for k, v := range categoryMap {
		i := 1
		if running == false {
			running = true
			goto label
		}
		for running {
			target := "https://interface.sina.cn/ent/feed.d.json?ch=" + k + "&page=" + strconv.Itoa(i)
			extract(target, v)
			i++
		}
	}
}
